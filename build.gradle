plugins {
	id 'java'
	id 'jacoco'
	id 'de.aaschmid.cpd' version '1.2'
}

def classesJava = "${project.buildDir}/classes/java/main"
def javasRoot = "${project.buildDir}src/main/java"
def testClassesJava = "${project.buildDir}/classes/test"
def testJavaRoot = "${rootProject.rootDir}/src/test/java"

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'de.aaschmid.cpd'

checkstyle{
	toolVersion = '8.19'
}

jacoco {
	toolVersion = "0.8.3"
	reportsDir = file("$buildDir/customJacocoReportDir")
}


task checkstyleMain (type: Checkstyle, overwrite: true) {
	ignoreFailures = true
	showViolations = false
	source fileTree('src/java/main')
	include '**/*.java'
	exclude '**/gen/**'
	exclude '**/R.java'
	exclude '**/BuildConfig.java'

	classpath = fileTree(classesJava)
	//nom du fichier de r√®gles checkstyle
	configFile = file("${rootProject.rootDir}/checkstyle.xml")
}
task checkstyleTest (type: Checkstyle, overwrite: true){
	ignoreFailures = true
	showViolations = false
	source fileTree('src/java/main')
	include '**/*.java'
	exclude '**/gen/**'
	exclude '**/R.java'
	exclude '**/BuildConfig.java'

	classpath = fileTree("$project.buildDir/classes/test/")
	configFile = file("${rootProject.rootDir}/checkstyle.xml")
}

task findbugsMain (type: FindBugs, overwrite: true) {
	ignoreFailures = true
	description 'Run findbugs'
	classes = fileTree(classesJava)
	source = fileTree(javasRoot)
	classpath = files(classesJava)
	effort = 'max'
	excludeFilter = file("./findBugsFilter.xml")
	reports {
		xml.enabled = true
		html.enabled = false
	}
}
task findbugsTest (type: FindBugs, overwrite: true) {
	ignoreFailures = true
	description 'Run findbugs'
	classes = fileTree(classesJava)
	source = fileTree( javasRoot)
	classpath = files(classesJava)
	effort = 'max'
	excludeFilter = file("./findBugsFilter.xml")
	reports {
		xml.enabled = true
		html.enabled = false
	}
}

task pmdMain(type: Pmd, overwrite: true) {
	ignoreFailures = true
	description 'Runs PMD inspection against Android sourcesets.'
	group = 'Code Quality'
	ruleSetFiles = files("${rootProject.rootDir}/pmd_rules.xml")
	source = fileTree( javasRoot)
	include '**/*.java'
	exclude '**/gen/**'
	reports {
		xml.enabled = true
		html.enabled = false
	}
}
task pmdTest(type: Pmd, overwrite: true) {
	ignoreFailures = true
	description 'Runs PMD inspection against Android sourcesets.'
	group = 'Code Quality'
	ruleSetFiles = files("${rootProject.rootDir}/pmd_rules.xml")
	source = fileTree(testJavaRoot)
	include '**/*.java'
	exclude '**/gen/**'
	reports {
		xml.enabled = true
		html.enabled = false
	}
}

jacocoTestReport {
	reports {
		xml.enabled false
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}
}
jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.5
			}
		}

		rule {
			enabled = false
			element = 'CLASS'
			includes = ['org.gradle.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.3
			}
		}
	}
}

group = 'quentinetpierre'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	testCompile group: 'junit', name: 'junit', version: '4.4'
}
